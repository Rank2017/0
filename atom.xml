<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Artifact.</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://artifact.me/"/>
  <updated>2017-03-24T20:46:28.528Z</updated>
  <id>http://artifact.me/</id>
  
  <author>
    <name>Art Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Universal Search #6 Baidu Search</title>
    <link href="http://artifact.me/universal-search-6-baidu-search/"/>
    <id>http://artifact.me/universal-search-6-baidu-search/</id>
    <published>2016-09-05T01:39:49.000Z</published>
    <updated>2017-03-24T20:46:28.528Z</updated>
    
    <content type="html"><![CDATA[<p>This is the 6th article in a series that covers the steps to add searching to <a href="http://ghost.org" target="_blank" rel="external">Ghost</a>, <a href="http://hexo.io" target="_blank" rel="external">Hexo</a> or any general website using APIs provided by various services.</p><p>We have covered UI and common logics in <a href="/universal-search-1-common-logic/">the first article</a>. This time we are going to explore <a href="http://zn.baidu.com/cse/home/index" target="_blank" rel="external">Baidu Search</a>.</p><p><del>Since the service is all in Chinese, please refer to <a href="http://otakism.org/universal-search" target="_blank" rel="external">this article</a> for content of this article.</del></p><p>I quited on this. In short term there won’t be Baidu search support in the universal search series.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the 6th article in a series that covers the steps to add searching to &lt;a href=&quot;http://ghost.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;G
    
    </summary>
    
    
      <category term="Ghost" scheme="http://artifact.me/tags/ghost/"/>
    
      <category term="Hexo" scheme="http://artifact.me/tags/hexo/"/>
    
      <category term="Search" scheme="http://artifact.me/tags/search/"/>
    
      <category term="API" scheme="http://artifact.me/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Universal Search #5 Azure Search</title>
    <link href="http://artifact.me/universal-search-5-azure-search/"/>
    <id>http://artifact.me/universal-search-5-azure-search/</id>
    <published>2016-09-03T22:30:34.000Z</published>
    <updated>2017-03-28T07:20:49.191Z</updated>
    
    <content type="html"><![CDATA[<p>This is the 5th article in a series that covers the steps to add searching to <a href="http://ghost.org" target="_blank" rel="external">Ghost</a>, <a href="http://hexo.io" target="_blank" rel="external">Hexo</a> or any general website using APIs provided by various services.</p><p>The latest version of Universal Search is available on Github at <a href="https://github.com/artchen/universal-search" target="_blank" rel="external">https://github.com/artchen/universal-search</a>.</p><p>We have covered UI and common logics in <a href="/universal-search-1-common-logic/">the first article</a>. In this article we are going to explore <a href="https://azure.microsoft.com/en-us/services/search/" target="_blank" rel="external">Azure Search</a>.</p><h2 id="register-for-service"><a href="#Register-for-Service" class="headerlink" title="Register for Service"></a>Register for Service</h2><p>First of all, register an Azure account or just use your Microsoft account (outlook.com, hotmail.com, etc), and start your free trial.</p><p>Go to the dashboard, and create a new service.</p><p><a href="https://cdn.otakism.com/images/universal-search/azure/azure-01.png" target="_blank" rel="external"><img src="https://cdn.otakism.com/images/universal-search/azure/azure-01.png" alt="Azure-01"></a></p><p>Search “Azure Search”.</p><p><a href="https://cdn.otakism.com/images/universal-search/azure/azure-02.png" target="_blank" rel="external"><img src="https://cdn.otakism.com/images/universal-search/azure/azure-02.png" alt="Azure-02"></a></p><p>Create a free Azure Search service. The creation might take a few minutes.</p><p><a href="https://cdn.otakism.com/images/universal-search/azure/azure-03.png" target="_blank" rel="external"><img src="https://cdn.otakism.com/images/universal-search/azure/azure-03.png" alt="Azure-03"></a></p><p>Go to the control panel of your new Azure Search service. Choose Keys to reveal admin keys. Note down your primary admin key. We need this admin key to access the REST API.</p><p><a href="https://cdn.otakism.com/images/universal-search/azure/azure-04.png" target="_blank" rel="external"><img src="https://cdn.otakism.com/images/universal-search/azure/azure-04.png" alt="Azure-04"></a></p><p>On the same panel, select “Manage query keys” and create a new query key. Note it down again. This query key will be used on the front-end to query your created index.</p><p><a href="https://cdn.otakism.com/images/universal-search/azure/azure-05.png" target="_blank" rel="external"><img src="https://cdn.otakism.com/images/universal-search/azure/azure-05.png" alt="Azure-05"></a></p><h2 id="generate-and-upload-data"><a href="#Generate-and-upload-data" class="headerlink" title="Generate and upload data"></a>Generate and upload data</h2><p>Just like <a href="https://www.algolia.com/" target="_blank" rel="external">Algolia</a>, Azure Search does not index your website automatically. Instead, it requires the users to create indexes and upload data.</p><p>In this tutorial, I will use <a href="https://github.com/artchen/hexo-azuresearch" target="_blank" rel="external">hexo-azuresearch</a>, a plugin that I wrote, to demonstrate how to integrate Azure Search with Hexo. If your website is on other platforms, Azure provides detailed documentation about all the APIs it supports so it should not be too complicated to write your own indexer and data uploader.</p><p>A heads up notice for non-English users, at this point I cannot get Azure Search to work with other languages. I will look into this issue.</p><h3 id="hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install --save hexo-azuresearch</div></pre></td></tr></table></figure><p>In your global <code>_config.yml</code>, add the following configuration:</p><p>In order for our front-end to work, you must include <code>title</code>, <code>excerpt:strip</code> and <code>path</code>. The other fields only help with searching accuracy.</p><figure class="highlight yml"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Azure Search</span></div><div class="line"><span class="attr">AzureSearch:</span></div><div class="line"><span class="attr">  serviceURL:</span> <span class="string">"https://&lt;your-service-name&gt;.search.windows.net"</span></div><div class="line"><span class="attr">  indexName:</span> <span class="string">"&lt;your-index-name&gt;"</span></div><div class="line"><span class="attr">  adminKey:</span> <span class="string">"&lt;your-azure-search-admin-key&gt;"</span></div><div class="line"><span class="attr">  analyzer:</span> <span class="string">"zh-Hans.lucene"</span> <span class="comment"># optional</span></div><div class="line"><span class="attr">  fields:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">title</span></div><div class="line"><span class="attr">    - excerpt:</span><span class="string">strip</span></div><div class="line"><span class="attr">    - content:</span><span class="string">strip</span></div><div class="line"><span class="bullet">    -</span> <span class="string">path</span></div><div class="line"><span class="bullet">    -</span> <span class="string">permalink</span></div></pre></td></tr></table></figure><p>Then run the following command to index and upload data:</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">hexo azuresearch</div></pre></td></tr></table></figure><h3 id="ghost"><a href="#Ghost" class="headerlink" title="Ghost"></a>Ghost</h3><p>Unfortunately there is no existing support for Ghost.</p><h2 id="build-the-class"><a href="#Build-the-class" class="headerlink" title="Build the class"></a>Build the class</h2><p>This section is more of a development note. Plugin users don’t have to read it.</p><p>The class for Azure Search is very similar to the one we built for <a href="/universal-search-2-google-custom-search-engine/">Google Custom Search Engine</a>. The only differences are the credentials and data formats.</p><script src="https://gist.github.com/artchen/a480bf1e066ca7412a2f20c40961782d.js"></script><h2 id="enable-your-search"><a href="#Enable-your-search" class="headerlink" title="Enable your search"></a>Enable your search</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> customSearch = <span class="keyword">new</span> AzureSearch(&#123;</div><div class="line">  <span class="attr">serviceName</span>: AZURE_SERVICE_NAME,</div><div class="line">  <span class="attr">indexName</span>: AZURE_INDEX_NAME,</div><div class="line">  <span class="attr">queryKey</span>: AZURE_QUERY_KEY</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the 5th article in a series that covers the steps to add searching to &lt;a href=&quot;http://ghost.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;G
    
    </summary>
    
    
      <category term="Ghost" scheme="http://artifact.me/tags/ghost/"/>
    
      <category term="Hexo" scheme="http://artifact.me/tags/hexo/"/>
    
      <category term="Search" scheme="http://artifact.me/tags/search/"/>
    
      <category term="API" scheme="http://artifact.me/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Universal Search #4 Algolia Search</title>
    <link href="http://artifact.me/universal-search-4-algolia-search/"/>
    <id>http://artifact.me/universal-search-4-algolia-search/</id>
    <published>2016-08-31T21:55:18.000Z</published>
    <updated>2017-03-28T07:19:36.402Z</updated>
    
    <content type="html"><![CDATA[<p>This is the 4th article in a series that covers the steps to add searching to <a href="http://ghost.org" target="_blank" rel="external">Ghost</a>, <a href="http://hexo.io" target="_blank" rel="external">Hexo</a> or any general website using APIs provided by various services.</p><p>The latest version of Universal Search is available on Github at <a href="https://github.com/artchen/universal-search" target="_blank" rel="external">https://github.com/artchen/universal-search</a>.</p><p>We have covered UI and common logics in <a href="/universal-search-1-common-logic/">the first article</a>. This time we are going to explore <a href="https://www.algolia.com/" target="_blank" rel="external">Algolia</a>, a wonderful tool to index your website.</p><h2 id="create-an-index"><a href="#Create-an-index" class="headerlink" title="Create an index"></a>Create an index</h2><p>First of all you need to register at <a href="https://www.algolia.com/" target="_blank" rel="external">www.algolia.com</a>.</p><p>Algolia will guide you to create the first application, you can choose a server location based on your target users.</p><p><a href="https://cdn.otakism.com/images/universal-search/algolia/algolia-01.png" target="_blank" rel="external"><img src="https://cdn.otakism.com/images/universal-search/algolia/algolia-01.png" alt="Algolia-01"></a></p><p>If a tutorial pops up, you can skip it. Go straight to create an index.</p><p><a href="https://cdn.otakism.com/images/universal-search/algolia/algolia-02.png" target="_blank" rel="external"><img src="https://cdn.otakism.com/images/universal-search/algolia/algolia-02.png" alt="Algolia-02"></a></p><p>Go to API Keys and find your credentials. You will need the Application ID, the Search-only API key and the Admin API key in the following sections.</p><p><a href="https://cdn.otakism.com/images/universal-search/algolia/algolia-03.png" target="_blank" rel="external"><img src="https://cdn.otakism.com/images/universal-search/algolia/algolia-03.png" alt="Algolia-03"></a></p><h2 id="generate-and-upload-data"><a href="#Generate-and-upload-data" class="headerlink" title="Generate and upload data"></a>Generate and upload data</h2><p>Algolia requires users to upload their search index data either manually or via provided APIs. They provide many integration sdks available at <a href="https://www.algolia.com/integrations" target="_blank" rel="external">https://www.algolia.com/integrations</a>. Most of them are well documented.</p><p>If your website have back-end (database, server logics, etc), most likely Algolia already provide an server-side client. Just go ahead and follow their instructions.</p><p>If you are using a static site generator like Hexo, you might need to code a plugin so that every time you generate the site, the program will also upload a copy of index to Algolia. Currently the only official Algolia plugin for static site generator is Jekyll.</p><p>I will only cover the integration with Hexo here since it is not yet officially supported.</p><h3 id="hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>Install and configure <a href="https://github.com/LouisBarranqueiro/hexo-algoliasearch" target="_blank" rel="external">hexo-algoliasearch</a> in your Hexo directory. This plugin will index your site and upload selected data to Algolia.</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install --save hexo-algoliasearch</div></pre></td></tr></table></figure><p>In your global <code>_config.yml</code>, add the following configuration:</p><p>In order for our front-end javascript to work, you must include <code>title</code>, <code>excerpt:strip</code> and <code>path</code>. The other fields only help with searching accuracy.</p><figure class="highlight yml"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Algolia</span></div><div class="line"><span class="attr">algolia:</span></div><div class="line"><span class="attr">  appId:</span> <span class="string">"YOUR ALGOLIA APPLICATION ID"</span></div><div class="line"><span class="attr">  apiKey:</span> <span class="string">"YOUR ALGOLIA SEARCH-ONLY API KEY"</span></div><div class="line"><span class="attr">  adminApiKey:</span> <span class="string">"YOUR ALGOLIA ADMIN API KEY"</span></div><div class="line"><span class="attr">  chunkSize:</span> <span class="number">5000</span></div><div class="line"><span class="attr">  indexName:</span> <span class="string">"YOUR INDEX NAME"</span></div><div class="line"><span class="attr">  fields:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">title</span></div><div class="line"><span class="attr">    - excerpt:</span><span class="string">strip</span></div><div class="line"><span class="bullet">    -</span> <span class="string">path</span></div><div class="line"><span class="attr">    - content:</span><span class="string">strip</span></div><div class="line"><span class="bullet">    -</span> <span class="string">permalink</span></div></pre></td></tr></table></figure><p>Then run the following command to upload data:</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">hexo algolia</div></pre></td></tr></table></figure><h3 id="ghost"><a href="#Ghost" class="headerlink" title="Ghost"></a>Ghost</h3><p>Unfortunately there is no existing support for Ghost.</p><h2 id="build-the-class"><a href="#Build-the-class" class="headerlink" title="Build the class"></a>Build the class</h2><p>This section is more of a development note. Plugin users don’t have to read it.</p><p>The class for Algolia is very similar to the one we built for <a href="/universal-search-2-google-custom-search-engine/">Google Custom Search Engine</a>. The only differences are the data formats.</p><p>For consistency of UI, I didn’t use the javascript client provided by Algolia, which is implemented as autocomplete instant search.</p><script src="https://gist.github.com/artchen/231eee1223539cfdd094caa07bd6bec5.js"></script><h2 id="enable-your-search"><a href="#Enable-your-search" class="headerlink" title="Enable your search"></a>Enable your search</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> customSearch = <span class="keyword">new</span> AlgoliaSearch(&#123;</div><div class="line">  <span class="attr">apiKey</span>: ALGOLIA_API_KEY,</div><div class="line">  <span class="attr">appId</span>: ALGOLIA_APP_ID,</div><div class="line">  <span class="attr">indexName</span>: ALGOLIA_INDEX_NAME</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the 4th article in a series that covers the steps to add searching to &lt;a href=&quot;http://ghost.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;G
    
    </summary>
    
    
      <category term="Ghost" scheme="http://artifact.me/tags/ghost/"/>
    
      <category term="Hexo" scheme="http://artifact.me/tags/hexo/"/>
    
      <category term="Search" scheme="http://artifact.me/tags/search/"/>
    
      <category term="API" scheme="http://artifact.me/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Universal Search #3 Hexo Local Search</title>
    <link href="http://artifact.me/universal-search-3-hexo-local-search/"/>
    <id>http://artifact.me/universal-search-3-hexo-local-search/</id>
    <published>2016-08-31T21:54:58.000Z</published>
    <updated>2017-03-24T20:46:28.528Z</updated>
    
    <content type="html"><![CDATA[<p>This is the 3rd article in a series that covers the steps to add searching to <a href="http://ghost.org" target="_blank" rel="external">Ghost</a>, <a href="http://hexo.io" target="_blank" rel="external">Hexo</a> or any general website using APIs provided by various services.</p><p>The latest version of Universal Search is available on Github at <a href="https://github.com/artchen/universal-search" target="_blank" rel="external">https://github.com/artchen/universal-search</a>.</p><p>We have covered UI and common logics in <a href="/universal-search-1-common-logic/">the first article</a>. This time we are going to explore Hexo local search. If you website is not generated by Hexo, you don’t necessarily need to read this article.</p><h2 id="basic-idea"><a href="#Basic-Idea" class="headerlink" title="Basic Idea"></a>Basic Idea</h2><p>Static site generator like Hexo does not rely on any database. Instead they pre-generate all pages and save them as individual html files. If we want to add search ability without using 3rd-party services, we will have to generate the “database” ourselves. In this case, the “database” is a index file that contains essential information of pages and posts. When the user submit a search request, the front-end javascript will download this index file, and searching for relevant items.</p><h2 id="generate-index-file"><a href="#Generate-Index-File" class="headerlink" title="Generate Index File"></a>Generate Index File</h2><p>There are several Hexo generators that does this for us. I use <a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="external">hexo-generator-json-content</a> by <a href="https://github.com/alexbruno" target="_blank" rel="external">alexbruno</a> for this project.</p><p>To install this plugin, first navigate to your Hexo directory, then</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install --save hexo-generator-json-content</div></pre></td></tr></table></figure><p>Then edit the global <code>_config.yml</code>, add the following configuration:</p><figure class="highlight yml"><table><tr><td class="code"><pre><div class="line"><span class="attr">jsonContent:</span></div><div class="line"><span class="attr">  meta:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  keywords:</span> <span class="literal">false</span> <span class="comment"># (english, spanish, polish, german, french, italian, dutch, russian, portuguese, swedish)</span></div><div class="line"><span class="attr">  pages:</span></div><div class="line"><span class="attr">    title:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    slug:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    date:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    updated:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    comments:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    path:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    link:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    permalink:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    excerpt:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    keywords:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    text:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    raw:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    content:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  posts:</span></div><div class="line"><span class="attr">    title:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    slug:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    date:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    updated:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    comments:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    path:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    link:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    permalink:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    excerpt:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    keywords:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    text:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    raw:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    content:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    categories:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    tags:</span> <span class="literal">false</span></div></pre></td></tr></table></figure><p>The plugin should be good to go. From now on, every time <code>hexo generate</code> is executed, a <code>content.json</code> file will be generated in the <code>public</code> directory.</p><h2 id="build-the-class"><a href="#Build-the-class" class="headerlink" title="Build the class"></a>Build the class</h2><p>This section is more of a development note. Plugin users don’t have to read it.</p><p>The class for Hexo local search is similar to the one we created for <a href="/universal-search-2-google-custom-search-engine">Google Custom Search Engine</a> except this time we need a <code>contentSearch(post, queryText)</code> function to manually account for the keyword searching.</p><p>I adopted this searching algorithm from <a href="http://hahack.com/codes/local-search-engine-for-hexo/" target="_blank" rel="external">http://hahack.com/codes/local-search-engine-for-hexo/</a>. It was pretty simple and clean.</p><script src="https://gist.github.com/artchen/dd07cb1552e0335cdda6c9f692cbca13.js"></script><h2 id="enable-your-search"><a href="#Enable-your-search" class="headerlink" title="Enable your search"></a>Enable your search</h2><p>Initialize an instance of the HexoSearch class:</p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">var customSearch = new HexoSearch(&#123;</div><div class="line">  endpoint: "&lt;path-to-your-content.json&gt;" # optional</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the 3rd article in a series that covers the steps to add searching to &lt;a href=&quot;http://ghost.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;G
    
    </summary>
    
    
      <category term="Ghost" scheme="http://artifact.me/tags/ghost/"/>
    
      <category term="Hexo" scheme="http://artifact.me/tags/hexo/"/>
    
      <category term="Search" scheme="http://artifact.me/tags/search/"/>
    
      <category term="API" scheme="http://artifact.me/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Universal Search #2 Google Custom Search Engine</title>
    <link href="http://artifact.me/universal-search-2-google-custom-search-engine/"/>
    <id>http://artifact.me/universal-search-2-google-custom-search-engine/</id>
    <published>2016-08-30T15:55:27.000Z</published>
    <updated>2017-03-28T07:21:14.075Z</updated>
    
    <content type="html"><![CDATA[<p>This is the 2nd article in a series that covers the steps to add searching to <a href="http://ghost.org" target="_blank" rel="external">Ghost</a>, <a href="http://hexo.io" target="_blank" rel="external">Hexo</a> or any general website using APIs provided by various services.</p><p>The latest version of Universal Search is available on Github at <a href="https://github.com/artchen/universal-search" target="_blank" rel="external">https://github.com/artchen/universal-search</a>.</p><p>We have covered UI and common logics in <a href="/universal-search-1-common-logic/">the previous article</a>. This time we are going to integrate <a href="https://cse.google.com" target="_blank" rel="external">Google Custom Search Engine</a>.</p><h2 id="get-engine-id"><a href="#Get-Engine-ID" class="headerlink" title="Get Engine ID"></a>Get Engine ID</h2><p>Go to <a href="https://cse.google.com" target="_blank" rel="external">https://cse.google.com</a>. Click the add button.</p><p><a href="https://cdn.otakism.com/images/universal-search/google/gcse-01.jpg" target="_blank" rel="external"><img src="https://cdn.otakism.com/images/universal-search/google/gcse-01.jpg" alt="gcse-01"></a></p><p>Go to next. Enter your website domain. Then click the create button.</p><p><a href="https://cdn.otakism.com/images/universal-search/google/gcse-02.jpg" target="_blank" rel="external"><img src="https://cdn.otakism.com/images/universal-search/google/gcse-02.jpg" alt="gcse-02"></a></p><p>On the congratulations screen, click Control Panel.</p><p><a href="https://cdn.otakism.com/images/universal-search/google/gcse-03.jpg" target="_blank" rel="external"><img src="https://cdn.otakism.com/images/universal-search/google/gcse-03.jpg" alt="gcse-03"></a></p><p>On the control panel, click Search Engine ID, note down the ID in the popup modal.</p><p><a href="https://cdn.otakism.com/images/universal-search/google/gcse-04.jpg" target="_blank" rel="external"><img src="https://cdn.otakism.com/images/universal-search/google/gcse-04.jpg" alt="gcse-04"></a></p><h2 id="get-api-key"><a href="#Get-API-Key" class="headerlink" title="Get API Key"></a>Get API Key</h2><p>Go to <a href="https://console.developers.google.com" target="_blank" rel="external">Google API Console</a>. You may need to register first. Click ENABLE API.</p><p><a href="https://cdn.otakism.com/images/universal-search/google/gcse-05.jpg" target="_blank" rel="external"><img src="https://cdn.otakism.com/images/universal-search/google/gcse-05.jpg" alt="gcse-05"></a></p><p>Search for “custom search”, click on the first result.</p><p><a href="https://cdn.otakism.com/images/universal-search/google/gcse-06.jpg" target="_blank" rel="external"><img src="https://cdn.otakism.com/images/universal-search/google/gcse-06.jpg" alt="gcse-06"></a></p><p>On the Custom Search API page, click on Credential in the left side bar.</p><p><a href="https://cdn.otakism.com/images/universal-search/google/gcse-07.jpg" target="_blank" rel="external"><img src="https://cdn.otakism.com/images/universal-search/google/gcse-07.jpg" alt="gcse-07"></a></p><p>On the Credential page, click create credential, then choose API Key.</p><p><a href="https://cdn.otakism.com/images/universal-search/google/gcse-08.jpg" target="_blank" rel="external"><img src="https://cdn.otakism.com/images/universal-search/google/gcse-08.jpg" alt="gcse-08"></a></p><p>On the popup modal, choose Browser key.</p><p><a href="https://cdn.otakism.com/images/universal-search/google/gcse-09.jpg" target="_blank" rel="external"><img src="https://cdn.otakism.com/images/universal-search/google/gcse-09.jpg" alt="gcse-09"></a></p><p>Name you API key and specify any URL wildcard as authorized referrers, then click create.</p><p><a href="https://cdn.otakism.com/images/universal-search/google/gcse-10.jpg" target="_blank" rel="external"><img src="https://cdn.otakism.com/images/universal-search/google/gcse-10.jpg" alt="gcse-10"></a></p><p>You will be prompted the API key.</p><p><a href="https://cdn.otakism.com/images/universal-search/google/gcse-11.jpg" target="_blank" rel="external"><img src="https://cdn.otakism.com/images/universal-search/google/gcse-11.jpg" alt="gcse-11"></a></p><h2 id="build-the-class"><a href="#Build-the-class" class="headerlink" title="Build the class"></a>Build the class</h2><p>This section is more of a development note. Plugin users don’t have to read it.</p><p>The <code>GoogleCustomSearch</code> class should inherit the <code>SearchService</code> class that we built in <a href="/universal-search-0-common-logic/">the previous article</a> so that it has all the functions that control common data logics and the UI.</p><p>There are only 3 functions to customize:</p><ul><li><code>buildResultList(data)</code>: traverse the result array, pass url, title and digest to the common <code>buildResult()</code> function to generate HTML markups.</li><li><code>buildMetadata(data)</code>: generate metadata to enable pagination.</li><li><code>query(queryText, startIndex, callback)</code>: send Ajax GET request to the Google Custom Search endpoint to get search results.</li></ul><p>In detail, we coded a class like this:</p><script src="https://gist.github.com/artchen/212e08ff3ae2290c7b6c0dcfb32a407f.js"></script><h2 id="enable-your-search"><a href="#Enable-your-search" class="headerlink" title="Enable your search"></a>Enable your search</h2><p>It should be as simple as initialize an instance of the GoogleCustomSearch class with your credentials:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> customSearch = <span class="keyword">new</span> GoogleCustomSearch(&#123;</div><div class="line">  <span class="attr">apiKey</span>: GOOGLE_CUSTOM_SEARCH_API_KEY,</div><div class="line">  <span class="attr">engineId</span>: GOOGLE_CUSTOM_SEARCH_ENGINE_ID</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the 2nd article in a series that covers the steps to add searching to &lt;a href=&quot;http://ghost.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;G
    
    </summary>
    
    
      <category term="Ghost" scheme="http://artifact.me/tags/ghost/"/>
    
      <category term="Hexo" scheme="http://artifact.me/tags/hexo/"/>
    
      <category term="Search" scheme="http://artifact.me/tags/search/"/>
    
      <category term="API" scheme="http://artifact.me/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Universal Search #1 Common Logic</title>
    <link href="http://artifact.me/universal-search-1-common-logic/"/>
    <id>http://artifact.me/universal-search-1-common-logic/</id>
    <published>2016-08-30T14:27:59.000Z</published>
    <updated>2017-03-24T20:46:28.528Z</updated>
    
    <content type="html"><![CDATA[<p>This is the 1st article in a series that covers the steps to add searching to <a href="http://ghost.org" target="_blank" rel="external">Ghost</a>, <a href="http://hexo.io" target="_blank" rel="external">Hexo</a> or any general website using APIs provided by various services.</p><p>The goal of this series is to eventually create a javascript package that allows users to add searching to their websites by only copy-pasting code snippets and changing some configurations.</p><p>I name the series “universal search” because these techniques are meant to work on any website. In reality, some of them require additional plugins to be installed, some of them may only apply to a few platforms. What I am trying to do here is to provide as many options as possible so that users can find at least one solution that works.</p><h2 id="before-reading"><a href="#Before-reading" class="headerlink" title="Before reading"></a>Before reading</h2><p>The latest version of Universal Search is available on Github at <a href="https://github.com/artchen/universal-search" target="_blank" rel="external">https://github.com/artchen/universal-search</a>, feel free to clone and install.</p><p>This article discusses my design of the plugin. If you only want to use it without knowing everything behind the scene, you can go ahead to one the of the following tutorials to setup individual search services:</p><ul><li><a href="/universal-search-2-google-custom-search-engine/">Google Custom Search Engine</a></li><li><a href="/universal-search-3-hexo-local-search">Hexo Local Search</a> - Hexo only</li><li><a href="/universal-search-4-algolia-search">Algolia Search</a></li><li><a href="/universal-search-5-azure-search">Azure Search</a></li><li><a href="/universal-search-6-baidu-search">Baidu Search</a></li></ul><h2 id="basic-workflow"><a href="#Basic-Workflow" class="headerlink" title="Basic Workflow"></a>Basic Workflow</h2><ul><li>Register a 3rd-party searching service, get the credentials (API Key, ID, etc).</li><li>Send Ajax GET requests to some endpoint, get response in JSON format.</li><li>Parse the response if necessary.</li><li>Render the results on UI.</li></ul><h2 id="common-ui"><a href="#Common-UI" class="headerlink" title="Common UI"></a>Common UI</h2><p>Though I always advocate original and customized design, this time I am going to use the same common UI for some consistency. This interface is independent of whatever 3rd-party search service we choose.</p><script src="https://gist.github.com/artchen/4a961c7ac9d6b9da188868c0f29a15d4.js"></script><p>This markup will be compressed and embedded into the javascript. When the plugin is initialized, the markup will be inserted into <code>&lt;body&gt;</code>.</p><h2 id="common-logic"><a href="#Common-Logic" class="headerlink" title="Common Logic"></a>Common Logic</h2><p>The javascript part of universal search should take care of 3 main aspects:</p><ul><li>Query for search results.</li><li>Parse results.</li><li>Render UI.</li></ul><p>We already decided that the UI should be the same across services. So the following UI interactions should be defined as common functions.</p><ul><li><code>onSubmit(event)</code>: when the user submit the search form, open modal and query.</li><li><code>onNextPage()</code>: when the user request the next page, fetch next page.</li><li><code>onPrevPage()</code>: when the user request the previous page, fetch previous page.</li><li><code>close()</code>: when the user close the modal, fade out the modal.</li><li><code>uiBeforeQuery()</code>: hide the result container, show loading animation.</li><li><code>uiAfterQuery()</code>: hide loading animation, scroll result container to top, fade in the results.</li><li><code>startLoading()</code>: start the timer for loading bar animation.</li><li><code>stopLoading()</code>: stop the timer for loading bar animation.</li></ul><p>The query and parsing need to be defined on a per service basis because they apparently have different formats of API and response data. But we can centralize the following functions.</p><ul><li><code>onQueryError(queryText, status)</code>: empty result container, generate error messages and render in error container.</li><li><code>buildResult(url, title, digest)</code>: generate html for one result.</li></ul><p>Most importantly, there should be init() and destroy():</p><ul><li><code>destroy()</code>: unregister event handlers, clear markups.</li><li><code>init()</code>: register event handlers.</li></ul><p>All the functions listed above are common logics that goes into a super class called <code>SearchService</code>.</p><p>Here is the result:</p><script src="https://gist.github.com/artchen/a24102f119cf67e385db7cfa39a9c812.js"></script><p>These conclude the high level design and common part of universal search.</p><p>You can now proceed to one of the following articles to integrate the search service of your choice:</p><ul><li><a href="/universal-search-2-google-custom-search-engine/">Google Custom Search Engine</a></li><li><a href="/universal-search-3-hexo-local-search">Hexo Local Search</a> - Hexo only</li><li><a href="/universal-search-4-algolia-search">Algolia Search</a></li><li><a href="/universal-search-5-azure-search">Azure Search</a></li><li><a href="/universal-search-6-baidu-search">Baidu Search</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the 1st article in a series that covers the steps to add searching to &lt;a href=&quot;http://ghost.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;G
    
    </summary>
    
    
      <category term="Ghost" scheme="http://artifact.me/tags/ghost/"/>
    
      <category term="Hexo" scheme="http://artifact.me/tags/hexo/"/>
    
      <category term="Search" scheme="http://artifact.me/tags/search/"/>
    
      <category term="API" scheme="http://artifact.me/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Theme Typescript</title>
    <link href="http://artifact.me/hexo-theme-typescript/"/>
    <id>http://artifact.me/hexo-theme-typescript/</id>
    <published>2016-06-11T18:01:18.000Z</published>
    <updated>2017-03-24T20:46:28.528Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Typescript</strong> is a minimal theme for <a href="http://hexo.io" target="_blank" rel="external">Hexo</a>.</p><p>The theme is available on github at <a href="https://github.com/artchen/hexo-theme-typescript" target="_blank" rel="external">https://github.com/artchen/hexo-theme-typescript</a></p><p>This theme is also available on:</p><ul><li>Ghost version: <a href="https://github.com/artchen/ghost-theme-typescript" target="_blank" rel="external">ghost-theme-typescript</a></li></ul><h2 id="dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h2><p>This theme depends on the following Hexo plugins to work correctly:</p><ul><li>hexo-generator-tag</li><li>hexo-renderer-ejs</li><li>hexo-renderer-less</li><li>hexo-renderer-marked</li><li>hexo-pagination</li></ul><p>Please make sure these plugins are installed before generate the site.</p><h2 id="customization"><a href="#Customization" class="headerlink" title="Customization"></a>Customization</h2><p>Typescript is customizable via <code>_config.yml</code> file under the theme directory.</p><p>The global <code>_config.yml</code> for Hexo may also be modified. In particular:</p><ul><li>Add/modify <code>disqus_shortname</code> field, the value set to your Disqus short name</li><li>Change <code>theme</code> field to <code>hexo-theme-typescript</code></li></ul><p>In addition to these settings, users may also want to edit/replace the following files:</p><ul><li>Replace the site logo: <code>source/images/logo.png</code>, <code>source/images/logo.psd</code></li><li>The search feature uses <a href="https://swiftype.com/" target="_blank" rel="external">swiftype</a>. Please follow their instruction to setup yours.</li><li>The icon fonts are from <a href="https://icomoon.io/" target="_blank" rel="external">icomoon</a>.</li><li>The default English font is Futura PT via Adobe Typekit. If you are using Typekit like me, please change the embedded javascript code in <code>layout/_partial/head.ejs</code>, else you can delete the corresponding code.</li></ul><h2 id="demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><img src="http://artifact.me/images/ghost-theme-typescript-screenshot.png" alt="Typescript Demo"></p><h2 id="copyright"><a href="#Copyright" class="headerlink" title="Copyright"></a>Copyright</h2><p>Public resources used in this theme:</p><ul><li><a href="https://icomoon.io/" target="_blank" rel="external">icomoon</a></li><li><a href="https://necolas.github.io/normalize.css/" target="_blank" rel="external">normalize.css</a></li><li><a href="https://github.com/davatron5000/FitVids.js" target="_blank" rel="external">fitvids.js</a></li></ul><p>Copyright © Art Chen</p><p>Please do not remove the “Theme Typescript designed by Art Chen” text and links.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Typescript&lt;/strong&gt; is a minimal theme for &lt;a href=&quot;http://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The theme is a
    
    </summary>
    
    
      <category term="Theme" scheme="http://artifact.me/tags/theme/"/>
    
      <category term="Typescript" scheme="http://artifact.me/tags/typescript/"/>
    
      <category term="Hexo" scheme="http://artifact.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Ghost Theme Typescript</title>
    <link href="http://artifact.me/ghost-theme-typescript/"/>
    <id>http://artifact.me/ghost-theme-typescript/</id>
    <published>2016-04-22T19:49:46.000Z</published>
    <updated>2017-03-24T20:46:28.528Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Typescript</strong> is a minimal theme for <a href="http://ghost.org" target="_blank" rel="external">Ghost</a>. I am working on a <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> version, too.</p><p>The theme is now available at <a href="https://github.com/artchen/ghost-theme-typescript" target="_blank" rel="external">https://github.com/artchen/ghost-theme-typescript</a>.</p><p>This theme is also available on:</p><ul><li>Hexo version: <a href="https://github.com/artchen/hexo-theme-typescript" target="_blank" rel="external">hexo-theme-typescript</a></li></ul><h2 id="production"><a href="#Production" class="headerlink" title="Production"></a>Production</h2><p>If you are going to use Typescript directly (without much customization).</p><figure class="highlight vim"><table><tr><td class="code"><pre><div class="line"><span class="keyword">cd</span> <span class="symbol">&lt;path-to-ghost-folder&gt;</span>/content/themes/</div><div class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/artchen/ghost-theme-typescript.git typescript</div></pre></td></tr></table></figure><p>The version shared via Github is used on <a href="http://otakism.org" target="_blank" rel="external">otakism.org</a>, my blog. There are quite a few things hard-coded into the template that you’ll need to customize. Including but not limited to:</p><ul><li>The site logo: <code>assets/img/logo.png</code></li><li>The short text under the logo: <code>partials/header.hbs</code></li><li>Disqus integration: <code>page.hbs</code>, <code>post.hbs</code></li><li>Social account links: <code>partials/footer.hbs</code></li></ul><p>The search feature relies on <a href="https://swiftype.com/" target="_blank" rel="external">swiftype</a>. Please follow their instruction to setup your own searches.</p><p>The fonts are from <a href="https://typekit.com/" target="_blank" rel="external">Typekit</a>. If you are not using typekit, please remove corresponding code is in <code>default.hbs</code>.</p><h2 id="development"><a href="#Development" class="headerlink" title="Development"></a>Development</h2><p>If you are going to develop your own features/styles/etc upon Typescript, here is how to set up the development environment.</p><p>Clone the repository.</p><figure class="highlight vim"><table><tr><td class="code"><pre><div class="line"><span class="keyword">cd</span> <span class="symbol">&lt;path-to-ghost-folder&gt;</span>/content/themes/</div><div class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/artchen/ghost-theme-typescript.git typescript</div></pre></td></tr></table></figure><p>Install <a href="http://gulpjs.com/" target="_blank" rel="external">gulp</a>, <a href="http://bower.io/" target="_blank" rel="external">bower</a> and <a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a> before proceed.</p><p>Install and build the app:</p><figure class="highlight cmake"><table><tr><td class="code"><pre><div class="line">cd ./typescript</div><div class="line">npm <span class="keyword">install</span></div><div class="line">bower <span class="keyword">install</span></div><div class="line">gulp</div></pre></td></tr></table></figure><p>At this point your development environment is ready.</p><h2 id="update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><figure class="highlight dts"><table><tr><td class="code"><pre><div class="line">cd <span class="params">&lt;path-to-ghost&gt;</span><span class="meta-keyword">/content/</span>themes<span class="meta-keyword">/typescript/</span></div><div class="line">git pull</div></pre></td></tr></table></figure><h2 id="demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>Visit my blog (in Chinese) for a demo of tis theme. <a href="http://otakism.org" target="_blank" rel="external">http://otakism.org</a>.</p><h2 id="screenshot"><a href="#Screenshot" class="headerlink" title="Screenshot"></a>Screenshot</h2><p><img src="/images/ghost-theme-typescript-screenshot.png" alt="Typescript Screenshot"></p><h2 id="copyright"><a href="#Copyright" class="headerlink" title="Copyright"></a>Copyright</h2><p>Public resources used in this theme:</p><ul><li><a href="https://icomoon.io/" target="_blank" rel="external">icomoon</a></li><li><a href="https://necolas.github.io/normalize.css/" target="_blank" rel="external">normalize.css</a></li></ul><p>Copyright © Art Chen</p><p>Please do not remove the “Theme Typescript designed by Art Chen” text and links.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Typescript&lt;/strong&gt; is a minimal theme for &lt;a href=&quot;http://ghost.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ghost&lt;/a&gt;. I am working on a
    
    </summary>
    
    
      <category term="Ghost" scheme="http://artifact.me/tags/ghost/"/>
    
      <category term="Theme" scheme="http://artifact.me/tags/theme/"/>
    
      <category term="Typescript" scheme="http://artifact.me/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Simple Gulp Configuration for Angular Applications</title>
    <link href="http://artifact.me/simple-gulp-configuration-for-angular-applications/"/>
    <id>http://artifact.me/simple-gulp-configuration-for-angular-applications/</id>
    <published>2016-03-11T20:54:24.000Z</published>
    <updated>2017-03-24T20:46:28.528Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://gulpjs.com/" target="_blank" rel="external">Gulp</a> is a great build tool for web applications. In this article I am sharing some gulp scripts that I found really useful.</p><h2 id="installing-gulp"><a href="#Installing-Gulp" class="headerlink" title="Installing Gulp"></a>Installing Gulp</h2><p><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a> needs to be installed prior to installing gulp. Once Node.js is ready on your machine, run this command to install gulp:</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo npm install --global gulp-cli</div></pre></td></tr></table></figure><p>This will install the gulp command line tools globally, such that the <code>gulp</code> command can be invoked throughout the computer.</p><h2 id="create-a-gulp-project"><a href="#Create-a-Gulp-Project" class="headerlink" title="Create a Gulp Project"></a>Create a Gulp Project</h2><p>Change directory to the project’s root.</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure><p>First of all, initialize npm, set the project name, version, author, etc. After the setup, <code>package.json</code> will be created.</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install gulp --save-dev</div></pre></td></tr></table></figure><p>Install gulp for the project. <code>--save-dev</code> make sure that gulp is logged in <code>package.json</code> as a development dependency. This is particularly useful when we need to port the project to another computer. With all the dependencies logged in package.json, we just run <code>npm install</code> to get them back, instead of install each of them again, or copy the gaint node_modules folder around.</p><h2 id="project-structure"><a href="#Project-Structure" class="headerlink" title="Project Structure"></a>Project Structure</h2><p>For an Angular.js application with gulp as the build tool, I usually setup the project directory like this:</p><figure class="highlight 1c"><table><tr><td class="code"><pre><div class="line"><span class="string">|- project/                </span></div><div class="line">  <span class="string">|- bower_components/</span></div><div class="line">  <span class="string">|- dist/</span></div><div class="line">  <span class="string">|- node_modules/    </span></div><div class="line">  <span class="string">|- src/</span></div><div class="line">    <span class="string">|- css/              # vendor css</span></div><div class="line">    <span class="string">|- less/             # my less source code</span></div><div class="line">    <span class="string">|- img/</span></div><div class="line">    <span class="string">|- js/               # my javascript source code</span></div><div class="line">    <span class="string">|- vendor/           # vendor js</span></div><div class="line">    <span class="string">|- views/            # angular templates</span></div><div class="line">    <span class="string">|- index.html</span></div><div class="line">  <span class="string">|- bower.json</span></div><div class="line">  <span class="string">|- gulpfile.js</span></div><div class="line">  <span class="string">|- package.json</span></div></pre></td></tr></table></figure><h2 id="a-simple-gulpfilejs"><a href="#A-simple-gulpfile-js" class="headerlink" title="A simple gulpfile.js"></a>A simple gulpfile.js</h2><p>Here comes the fun part. A basic gulpfile looks like this:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// require gulp dependencies</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line"><span class="comment">// declare a gulp task</span></div><div class="line">gulp.task(<span class="string">'task_name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// task pipelines</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>The tasks can be run in command line like:</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">gulp task_name</div></pre></td></tr></table></figure><h2 id="define-paths"><a href="#Define-Paths" class="headerlink" title="Define Paths"></a>Define Paths</h2><p>Define a path object to keep track of all the source code in the project, making it easier for reference in various gulp tasks. For one of the angularjs application, I had the following paths:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> path = &#123;</div><div class="line">  <span class="comment">// template markups</span></div><div class="line">  HTML: [</div><div class="line">    <span class="string">'src/*.html'</span>,</div><div class="line">    <span class="string">'src/views/**/*.html'</span>,</div><div class="line">    <span class="string">'src/views/*.html'</span></div><div class="line">  ],</div><div class="line">  <span class="comment">// my js source code</span></div><div class="line">  JS: [</div><div class="line">    <span class="string">'src/js/**/*.js'</span></div><div class="line">    <span class="string">'src/js/*.js'</span>,</div><div class="line">  ],</div><div class="line">  <span class="comment">// all less files (for changes monitoring purpose)</span></div><div class="line">  LESS_ALL: [</div><div class="line">    <span class="string">'src/less/*.less'</span></div><div class="line">  ],</div><div class="line">  <span class="comment">// main less file (others are imported in style.less)</span></div><div class="line">  LESS: [</div><div class="line">    <span class="string">'src/less/style.less'</span></div><div class="line">  ],</div><div class="line">  <span class="comment">// images</span></div><div class="line">  IMG: [</div><div class="line">    <span class="string">'src/img/**'</span></div><div class="line">  ],</div><div class="line">  <span class="comment">// vendor css</span></div><div class="line">  CSS: [</div><div class="line">    <span class="string">'src/css/*.css'</span></div><div class="line">  ],</div><div class="line">  <span class="comment">// vendor js</span></div><div class="line">  VENDOR: [</div><div class="line">    <span class="string">'bower_components/angular/angular.js'</span>,</div><div class="line">    <span class="string">'bower_components/angular-animate/angular-aria.js'</span>,</div><div class="line">    <span class="comment">// ...and more</span></div><div class="line">  ],</div><div class="line">  <span class="attr">DIST</span>: [</div><div class="line">    <span class="string">'./dist'</span></div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="installing-gulp-plugins"><a href="#Installing-Gulp-Plugins" class="headerlink" title="Installing Gulp Plugins"></a>Installing Gulp Plugins</h2><p>There are tons of useful gulp plugins to explore. Gulp plugins can be installed by</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install &lt;plugin-name&gt; --save-dev</div></pre></td></tr></table></figure><p>For example, to install <code>gulp-connect</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install gulp-connect --save-dev</div></pre></td></tr></table></figure><h2 id="useful-gulp-tasks"><a href="#Useful-Gulp-Tasks" class="headerlink" title="Useful Gulp Tasks"></a>Useful Gulp Tasks</h2><p>Here I only introduce some gulp tasks that I found helpful in angularjs development.</p><p>Spin up a erver for <code>dist</code>.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>(<span class="string">'gulp-connect'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  connect.server(&#123;</div><div class="line">    <span class="attr">root</span>: <span class="string">'dist'</span>,</div><div class="line">    <span class="attr">port</span>: <span class="number">4000</span></div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>Clean up distribution directory.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./dist/*'</span>, &#123;<span class="attr">force</span>: <span class="literal">true</span>&#125;)</div><div class="line">    .pipe(clean());</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>Use JSLint.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'lint'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(path.JS)</div><div class="line">    .pipe(jshint())</div><div class="line">    .pipe(jshint.reporter(<span class="string">'default'</span>))</div><div class="line">    .pipe(jshint.reporter(<span class="string">'fail'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>Copy over CSS and HTML</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  gulp.src(path.CSS)</div><div class="line">    .pipe(gulp.dest(path.DIST + <span class="string">'/css'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  gulp.src(path.HTML, &#123;<span class="attr">base</span>: <span class="string">'src'</span>&#125;)</div><div class="line">    .pipe(gulp.dest(path.DIST));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>Compile, minify and copy Less.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</div><div class="line"><span class="keyword">var</span> lessDependents = <span class="built_in">require</span>(<span class="string">'gulp-less-dependents'</span>);</div><div class="line"><span class="keyword">var</span> minifyCSS = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'less'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  gulp.src(path.LESS)</div><div class="line">  	.pipe(lessDependents())</div><div class="line">    .pipe(less())</div><div class="line">    .pipe(minifyCSS())</div><div class="line">    .pipe(gulp.dest(path.DIST + <span class="string">'/css'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>Merge, uglify and copy js files.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> ngAnnotate = <span class="built_in">require</span>(<span class="string">'gulp-ng-annotate'</span>);</div><div class="line"><span class="keyword">var</span> sourcemaps = <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  gulp.src(path.JS)</div><div class="line">  	.pipe(sourcemaps.init())</div><div class="line">		  .pipe(concat(<span class="string">'app.js'</span>))</div><div class="line">		  .pipe(ngAnnotate())</div><div class="line">		  .pipe(uglify())</div><div class="line">		.pipe(sourcemaps.write())</div><div class="line">    .pipe(gulp.dest(path.DIST + <span class="string">'/js'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'vendor'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	gulp.src(path.VENDOR)</div><div class="line">		.pipe(concat(<span class="string">'vendor.js'</span>))</div><div class="line">		.pipe(ngAnnotate())</div><div class="line">		.pipe(uglify())</div><div class="line">    .pipe(gulp.dest(path.DIST + <span class="string">'/js'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>Compress images.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'img'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.src(path.IMG)</div><div class="line">    .pipe(imagemin())</div><div class="line">    .pipe(gulp.dest(path.DIST + <span class="string">'/img'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>Watch changes and automate tasks.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> watch = <span class="built_in">require</span>(<span class="string">'gulp-watch'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  gulp.watch(path.LESS_ALL, [<span class="string">'less'</span>]);</div><div class="line">  gulp.watch(path.VENDOR, [<span class="string">'vendor'</span>]);</div><div class="line">  gulp.watch(path.JS, [<span class="string">'lint'</span>, <span class="string">'js'</span>]);</div><div class="line">  gulp.watch(path.HTML, [<span class="string">'html'</span>]);</div><div class="line">  gulp.watch(path.IMG, [<span class="string">'img'</span>]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>Default task.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> all_tasks = [<span class="string">'lint'</span>, <span class="string">'css'</span>, <span class="string">'less'</span>, <span class="string">'vendor'</span>, <span class="string">'js'</span>, <span class="string">'html'</span>, <span class="string">'img'</span>];</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, all_tasks);</div></pre></td></tr></table></figure><h2 id="a-more-complete-gulpfilejs"><a href="#A-More-Complete-gulpfile-js" class="headerlink" title="A More Complete gulpfile.js"></a>A More Complete gulpfile.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* gulp dependencies */</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</div><div class="line"><span class="keyword">var</span> watch = <span class="built_in">require</span>(<span class="string">'gulp-watch'</span>);</div><div class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</div><div class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>(<span class="string">'gulp-connect'</span>);</div><div class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"><span class="keyword">var</span> sourcemaps = <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> ngAnnotate = <span class="built_in">require</span>(<span class="string">'gulp-ng-annotate'</span>);</div><div class="line"><span class="keyword">var</span> minifyCSS = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</div><div class="line"><span class="keyword">var</span> lessDependents = <span class="built_in">require</span>(<span class="string">'gulp-less-dependents'</span>);</div><div class="line"><span class="keyword">var</span> clean = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>);</div><div class="line"><span class="keyword">var</span> bower = <span class="built_in">require</span>(<span class="string">'gulp-bower'</span>);</div><div class="line"><span class="keyword">var</span> concat_vendor = <span class="built_in">require</span>(<span class="string">'gulp-concat-vendor'</span>);</div><div class="line"><span class="keyword">var</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</div><div class="line"></div><div class="line"><span class="comment">/* path def */</span></div><div class="line"><span class="keyword">var</span> path = &#123;</div><div class="line">  <span class="attr">HTML</span>: [</div><div class="line">  	<span class="string">'src/.htaccess'</span>, </div><div class="line">  	<span class="string">'src/*.html'</span>, </div><div class="line">  	<span class="string">'src/views/**/*.html'</span>, </div><div class="line">  	<span class="string">'src/views/*.html'</span>, </div><div class="line">  	<span class="string">'src/favicon.png'</span></div><div class="line">  ],</div><div class="line">  <span class="attr">JS</span>: [</div><div class="line">  	<span class="string">'src/js/*.js'</span>, </div><div class="line">  	<span class="string">'src/js/**/*.js'</span></div><div class="line">  ],</div><div class="line">  <span class="attr">CSS</span>: [</div><div class="line">	  <span class="string">'src/css/*.css'</span></div><div class="line">  ],</div><div class="line">  <span class="attr">LESS</span>: [</div><div class="line">  	<span class="string">'src/less/style.less'</span></div><div class="line">  ],</div><div class="line">  <span class="attr">LESS_ALL</span>: [</div><div class="line">  	<span class="string">'src/less/*.less'</span></div><div class="line">  ], </div><div class="line">  <span class="attr">IMG</span>: [</div><div class="line">  	<span class="string">'src/img/**'</span></div><div class="line">  ],</div><div class="line">  <span class="attr">VENDOR</span>: [</div><div class="line">  	<span class="string">'bower_components/angular/angular.js'</span>, </div><div class="line">		<span class="string">'bower_components/angular-animate/angular-animate.js'</span>, </div><div class="line">		<span class="string">'bower_components/angular-aria/angular-aria.js'</span>, </div><div class="line">		<span class="string">'bower_components/angular-messages/angular-messages.js'</span>,</div><div class="line">		<span class="string">'bower_components/angular-sanitize/angular-sanitize.js'</span>,  </div><div class="line">		<span class="string">'bower_components/angular-ui-router/release/angular-ui-router.js'</span></div><div class="line">    <span class="comment">// ...and more</span></div><div class="line">	],</div><div class="line">  <span class="attr">DIST</span>: <span class="string">'./dist'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* spin up distribution server */</span></div><div class="line">gulp.task(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	connect.server(&#123;</div><div class="line">		<span class="attr">root</span>: <span class="string">'dist'</span>,</div><div class="line">		<span class="attr">port</span>: <span class="number">4005</span></div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/* clean up dist dir */</span></div><div class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> gulp.src(<span class="string">'./dist/*'</span>, &#123;<span class="attr">force</span>: <span class="literal">true</span>&#125;)</div><div class="line">		.pipe(clean());</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/* jslint for debugging */</span></div><div class="line">gulp.task(<span class="string">'lint'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(path.JS)</div><div class="line">    .pipe(jshint())</div><div class="line">    .pipe(jshint.reporter(<span class="string">'default'</span>))</div><div class="line">    .pipe(jshint.reporter(<span class="string">'fail'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/* move css */</span></div><div class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  gulp.src(path.CSS)</div><div class="line">    .pipe(gulp.dest(path.DIST + <span class="string">'/css'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/* compile less */</span></div><div class="line">gulp.task(<span class="string">'less'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  gulp.src(path.LESS)</div><div class="line">  	.pipe(lessDependents())</div><div class="line">    .pipe(less())</div><div class="line">    .pipe(minifyCSS())</div><div class="line">    .pipe(gulp.dest(path.DIST + <span class="string">'/css'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/* concat and compress app scripts */</span></div><div class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  gulp.src(path.JS)</div><div class="line">  	.pipe(sourcemaps.init())</div><div class="line">		  .pipe(concat(<span class="string">'app.js'</span>))</div><div class="line">		  .pipe(ngAnnotate())</div><div class="line">		  .pipe(uglify())</div><div class="line">		.pipe(sourcemaps.write())</div><div class="line">    .pipe(gulp.dest(path.DIST + <span class="string">'/js'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/* concat vendor dependencies */</span></div><div class="line">gulp.task(<span class="string">'vendor'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	gulp.src(path.VENDOR)</div><div class="line">		.pipe(concat(<span class="string">'vendor.js'</span>))</div><div class="line">		.pipe(ngAnnotate())</div><div class="line">		.pipe(uglify())</div><div class="line">    .pipe(gulp.dest(path.DIST + <span class="string">'/js'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/* copy over markups */</span></div><div class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.src(path.HTML, &#123;<span class="attr">base</span>: <span class="string">'src'</span>&#125;)</div><div class="line">    .pipe(gulp.dest(path.DIST));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/* compress images */</span></div><div class="line">gulp.task(<span class="string">'img'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.src(path.IMG)</div><div class="line">    .pipe(imagemin())</div><div class="line">    .pipe(gulp.dest(path.DIST + <span class="string">'/img'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/* watch all changes */</span></div><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  gulp.watch(path.LESS_ALL, [<span class="string">'less'</span>]);</div><div class="line">  gulp.watch(path.VENDOR, [<span class="string">'vendor'</span>]);</div><div class="line">  gulp.watch(path.JS, [<span class="string">'lint'</span>, <span class="string">'js'</span>]);</div><div class="line">  gulp.watch(path.HTML, [<span class="string">'html'</span>]);</div><div class="line">  gulp.watch(path.IMG, [<span class="string">'img'</span>]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/* defualt */</span></div><div class="line">gulp.task(<span class="string">'default'</span>, all_tasks);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://gulpjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gulp&lt;/a&gt; is a great build tool for web applications. In this article I am sha
    
    </summary>
    
    
      <category term="Gulp" scheme="http://artifact.me/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>Create Virtual Hosts on MAMP</title>
    <link href="http://artifact.me/create-virtual-hosts-on-mamp/"/>
    <id>http://artifact.me/create-virtual-hosts-on-mamp/</id>
    <published>2016-01-17T01:38:49.000Z</published>
    <updated>2017-03-24T20:46:28.528Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.mamp.info/en/" target="_blank" rel="external">MAMP</a> is a great GUI tool for creating server on localhost. But the free virsion of it only has very basic configurations. For example, creating a virtual host is not included. So I have to write the configurations on my own.</p><p>This article is based on Windows OS. Setup on Mac OS should be similar.</p><h2 id="why-virtual-hosts"><a href="#Why-Virtual-Hosts" class="headerlink" title="Why Virtual Hosts"></a>Why Virtual Hosts</h2><p>Question: Why do we need to virtual hosts anyway? Answer: it simplifies your testing and developing. When developing a website, I want to visit it via something like <code>http://test.local</code>, rather than <code>http://localhost/test/</code>. The benefit of the former option is not just that it looks more like a real URL, or it is shorter. By creating <code>test.local</code> as the local domain, the root directory for your site is configured to any location your would like it to be, so there is no more hazard of nested path.</p><h2 id="modify-hosts"><a href="#Modify-Hosts" class="headerlink" title="Modify Hosts"></a>Modify Hosts</h2><p>First, add the desired domain to the system’s host file. It is located at <code>C:\Windows\System32\drivers\etc\hosts</code>.</p><p>Add this line:</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>		<span class="selector-tag">test</span><span class="selector-class">.local</span></div></pre></td></tr></table></figure><p>You can replace <code>test.local</code> with almost anything of your choice.</p><h2 id="modify-apache-configuration"><a href="#Modify-Apache-Configuration" class="headerlink" title="Modify Apache Configuration"></a>Modify Apache Configuration</h2><p>Modify <code>C:\MAMP\conf\apache\httpd.conf</code>.</p><p>Find this line:</p><figure class="highlight autoit"><table><tr><td class="code"><pre><div class="line"><span class="meta"># Virtual Hosts</span></div><div class="line"><span class="meta"># <span class="meta-keyword">Include</span> /Applications/MAMP/conf/apache/extra/httpd-vhosts.conf</span></div></pre></td></tr></table></figure><p>Change it to</p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><div class="line"># Virtual Hosts</div><div class="line">Include C:<span class="symbol">\M</span>AMP<span class="symbol">\c</span>onf<span class="symbol">\a</span>pache<span class="symbol">\h</span>ttpd-vhosts.conf</div></pre></td></tr></table></figure><h2 id="create-virtual-host-configuration"><a href="#Create-Virtual-Host-Configuration" class="headerlink" title="Create Virtual Host Configuration"></a>Create Virtual Host Configuration</h2><p>Now create the configuration file <code>httpd-vhosts.conf</code>.</p><figure class="highlight apache"><table><tr><td class="code"><pre><div class="line"><span class="attribute">NameVirtualHost</span> *:80</div><div class="line"></div><div class="line"><span class="section">&lt;VirtualHost *:80&gt;</span></div><div class="line">    <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> 'C:\MAMP\htdocs'</div><div class="line">    <span class="attribute"><span class="nomarkup">ServerName</span></span> localhost</div><div class="line"><span class="section">&lt;/VirtualHost&gt;</span></div><div class="line"> </div><div class="line"><span class="section">&lt;VirtualHost *:80&gt;</span></div><div class="line">    <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> 'C:\MAMP\htdocs\test'</div><div class="line">    <span class="attribute"><span class="nomarkup">ServerName</span></span> test.local</div><div class="line"><span class="section">&lt;/VirtualHost&gt;</span></div></pre></td></tr></table></figure><p>Start MAMP, your site should be available at <code>http://test.local</code>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.mamp.info/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MAMP&lt;/a&gt; is a great GUI tool for creating server on localhost. But the
    
    </summary>
    
    
      <category term="MAMP" scheme="http://artifact.me/tags/mamp/"/>
    
      <category term="Apache" scheme="http://artifact.me/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title>Serve Ghost and Nginx on Ubuntu 14.04 LTS</title>
    <link href="http://artifact.me/serve-ghost-and-nginx-on-ubuntu-14-04-lts/"/>
    <id>http://artifact.me/serve-ghost-and-nginx-on-ubuntu-14-04-lts/</id>
    <published>2016-01-10T00:00:00.000Z</published>
    <updated>2017-03-24T20:46:28.528Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I switched from <a href="https://www.linode.com/" target="_blank" rel="external">Linode</a> to <a href="https://www.digitalocean.com/" target="_blank" rel="external">DigitalOcean</a> because of some rumor that Linode website is blocked in China. Here is a memo of how I migrated a Ghost blog, <a href="http://otakism.org" target="_blank" rel="external">otakism.org</a>.</p><p>Some content came from several tutorials from DigitalOcean community. Credits are given at the end of this article.</p><h2 id="install-nginx"><a href="#Install-Nginx" class="headerlink" title="Install Nginx"></a>Install Nginx</h2><p>Install Nginx via <code>apt-get</code>.</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install nginx</div></pre></td></tr></table></figure><h2 id="create-site-directories"><a href="#Create-Site-Directories" class="headerlink" title="Create Site Directories"></a>Create Site Directories</h2><p>I prefer <code>/var/www</code> as the root directory. To do that I created the following folders to hold my website files.</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo mkdir -p /var/www/rakugaki.me/html</div><div class="line">sudo mkdir -p /var/www/otakism.org/html</div><div class="line">sudo chown -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /var/www/rakugaki.me/html</div><div class="line">sudo chown -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /var/www/otakism.org/html</div><div class="line">sudo chmod -R 755 /var/www</div></pre></td></tr></table></figure><h2 id="create-server-block-files"><a href="#Create-Server-Block-Files" class="headerlink" title="Create Server Block Files"></a>Create Server Block Files</h2><p>Server blocks configure ports and root directories for each website, as well as details about how they should be served.</p><p>Here I used <a href="http://rakugaki.me" target="_blank" rel="external">rakugaki.me</a> as the default domain of my server.</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/rakugaki.me</div><div class="line">sudo vim /etc/nginx/sites-available/rakugaki.me</div></pre></td></tr></table></figure><p>Change the configuration like this:</p><figure class="highlight nginx"><table><tr><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">80</span> default_server;</div><div class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span> default_server ipv6only=<span class="literal">on</span>;</div><div class="line"></div><div class="line">    <span class="attribute">root</span> /var/www/rakugaki.me/html;</div><div class="line">    <span class="attribute">index</span> index.html index.htm;</div><div class="line"></div><div class="line">    <span class="attribute">server_name</span> rakugaki.me, www.rakugaki.me;</div><div class="line"></div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Then I created the second server block file for <a href="http://otakism.org" target="_blank" rel="external">otakism.org</a>. Since it is a Ghost blog, the file should be like this:</p><figure class="highlight nginx"><table><tr><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span>;</div><div class="line">    <span class="attribute">server_name</span> otakism.org;</div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">proxy_set_header</span>   X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span>   Host      <span class="variable">$http_host</span>;</div><div class="line">        <span class="attribute">proxy_pass</span>         http://127.0.0.1:2368;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>The files are done but we are not done. Enable the server block files.</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo ln <span class="_">-s</span> /etc/nginx/sites-available/rakugaki.me /etc/nginx/sites-enabled/</div><div class="line">sudo ln <span class="_">-s</span> /etc/nginx/sites-available/otakism.org /etc/nginx/sites-enabled/</div></pre></td></tr></table></figure><p>Delete the default site generated by Nginx.</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo rm /etc/nginx/sites-enabled/default</div></pre></td></tr></table></figure><p>Restart Nginx to apply new settings.</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo service nginx restart</div></pre></td></tr></table></figure><h2 id="install-ghost"><a href="#Install-Ghost" class="headerlink" title="Install Ghost"></a>Install Ghost</h2><p>Prerequisites first. Ghost requires <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a> and <a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>. These can be installed in various ways. Refer to <a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-blog-with-ghost-and-nginx-on-ubuntu-14-04" target="_blank" rel="external">this article</a> for more options.</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install nodejs</div><div class="line">sudo apt-get install npm</div></pre></td></tr></table></figure><p>Download Ghost. Details about the remaining steps in this chapter can be found in the <a href="http://support.ghost.org/installing-ghost-linux/" target="_blank" rel="external">official guide</a> at Ghost.org.</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install zip wget</div><div class="line"></div><div class="line"><span class="built_in">cd</span> /var/www/otakism.org/html</div><div class="line">sudo wget https://ghost.org/zip/ghost-latest.zip</div><div class="line">sudo unzip <span class="_">-d</span> ghost ghost-latest.zip</div></pre></td></tr></table></figure><p>Install it.</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="built_in">cd</span> ghost/</div><div class="line">sudo npm install --production</div></pre></td></tr></table></figure><h2 id="configure-ghost"><a href="#Configure-Ghost" class="headerlink" title="Configure Ghost"></a>Configure Ghost</h2><p>Change the url and/or port under production section.</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo cp config.example.js config.js</div><div class="line">sudo vim config.js</div></pre></td></tr></table></figure><p>I also needed to migrate data, images and themes. Copy or replace them under <code>content/</code>.</p><h2 id="keep-ghost-running"><a href="#Keep-Ghost-Running" class="headerlink" title="Keep Ghost Running"></a>Keep Ghost Running</h2><p>Create upstart configurations to make the ghost blog start on system boot. In this way I can also manage my ghost blog as a service.</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo /etc/init/vim ghost-otakism.conf</div></pre></td></tr></table></figure><p>Paste the following lines.</p><figure class="highlight applescript"><table><tr><td class="code"><pre><div class="line"><span class="comment"># ghost-otakism</span></div><div class="line"></div><div class="line">start <span class="keyword">on</span> startup</div><div class="line"></div><div class="line"><span class="keyword">script</span></div><div class="line">    cd /var/www/otakism.org/html/ghost</div><div class="line">    npm start <span class="comment">--production</span></div><div class="line"><span class="keyword">end</span> <span class="keyword">script</span></div></pre></td></tr></table></figure><p>Finally I can summon my ghost.</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo service ghost-otakism start</div></pre></td></tr></table></figure><p>Contents about Nginx setup credits to Justin Ellingwood, original post at <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-14-04-lts" target="_blank" rel="external">How To Set Up Nginx Server Blocks (Virtual Hosts) on Ubuntu 14.04 LTS</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I switched from &lt;a href=&quot;https://www.linode.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linode&lt;/a&gt; to &lt;a href=&quot;https://www.digitalocean
    
    </summary>
    
    
      <category term="Ghost" scheme="http://artifact.me/tags/ghost/"/>
    
      <category term="Nginx" scheme="http://artifact.me/tags/nginx/"/>
    
      <category term="Ubuntu" scheme="http://artifact.me/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ruby on Rails Configuration on Mac OS X 10.11</title>
    <link href="http://artifact.me/ruby-on-rails-config-mac/"/>
    <id>http://artifact.me/ruby-on-rails-config-mac/</id>
    <published>2015-12-25T00:00:00.000Z</published>
    <updated>2017-03-24T20:46:28.528Z</updated>
    
    <content type="html"><![CDATA[<p>This is a memo of how to setup <a href="http://rubyonrails.org/" target="_blank" rel="external">Ruby-on-Rails</a> on Mac OS X 10.11. Especially, to get it work on <a href="https://www.jetbrains.com/ruby/" target="_blank" rel="external">RubyMine 8.0.3</a>.</p><p>The following process might not be the solution for everyone.</p><a id="more"></a><h2 id="command-line-tools"><a href="#Command-Line-Tools" class="headerlink" title="Command-Line Tools"></a>Command-Line Tools</h2><p>First of all, make sure developer command-line tools is installed.</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">xcode-select --install</div></pre></td></tr></table></figure><p>If it is already installed, expected output should be:</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">xcode-select: error: <span class="built_in">command</span> line tools are already installed, use <span class="string">"Software Update"</span> to install updates</div></pre></td></tr></table></figure><h2 id="homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p>Install <a href="http://brew.sh/" target="_blank" rel="external">Homebrew</a>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure><p>Mac OS X 10.11 comes with version 2.0.0 of Ruby so this command should work.</p><p>Then we can install almost all the packages we need via homebrew.</p><h2 id="ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><p>Use the officially recommended way to manage ruby versions with rbenv.</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">brew install rbenv ruby-build</div><div class="line">rbenv install 2.2.4</div><div class="line">rbenv global 2.2.4</div></pre></td></tr></table></figure><p>Check version:</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">ruby -v</div></pre></td></tr></table></figure><h2 id="dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h2><p>If I remember correctly.</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">brew update</div><div class="line">brew upgrade</div><div class="line">brew install libxml2 libxslt libiconv</div><div class="line">gem install nokogiri -- --use-system-libraries --with-xml2-include=/usr/include/libxml2 --with-xml2-lib=/usr/lib/</div><div class="line">brew install mysql</div><div class="line">gem install mysql</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a memo of how to setup &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Ruby-on-Rails&lt;/a&gt; on Mac OS X 10.11. Especially, to get it work on &lt;a href=&quot;https://www.jetbrains.com/ruby/&quot;&gt;RubyMine 8.0.3&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The following process might not be the solution for everyone.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ruby-on-Rails" scheme="http://artifact.me/tags/ruby-on-rails/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Theme Fact</title>
    <link href="http://artifact.me/hexo-theme-fact/"/>
    <id>http://artifact.me/hexo-theme-fact/</id>
    <published>2015-11-13T00:00:00.000Z</published>
    <updated>2017-03-24T20:46:28.528Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Fact</strong> is a simple but powerful theme for <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>. It comes with integration of tags, categories, archive and table-of-contents. The style design is inspired by <a href="http://v2ex.com/" target="_blank" rel="external">V2EX</a>.</p><p>The theme is available on my Github as a public repository <a href="https://github.com/artchen/hexo-theme-fact" target="_blank" rel="external">hexo-theme-fact</a>.</p><h2 id="installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>I assume you already have a Hexo blog initialized.</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="built_in">cd</span> &lt;path-to-hexo-folder&gt;/themes</div><div class="line">git <span class="built_in">clone</span> https://github.com/artchen/hexo-theme-fact.git fact</div></pre></td></tr></table></figure><p>Don’t forget to modify <code>_config.yml</code> under root directory of Hexo blog. Change theme to Fact.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">theme: fact</div></pre></td></tr></table></figure><h2 id="configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>Some configuration can be found in <code>_config.yml</code> under the <code>themes/fact</code> directory.</p><h2 id="update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="built_in">cd</span> &lt;path-to-hexo-folder&gt;/themes/fact</div><div class="line">git pull</div></pre></td></tr></table></figure><h2 id="fonts"><a href="#Fonts" class="headerlink" title="Fonts"></a>Fonts</h2><p>I used <a href="https://typekit.com/fonts/futura-pt" target="_blank" rel="external">Futura</a> for text, and <a href="https://typekit.com/fonts/inconsolata" target="_blank" rel="external">Inconsolata</a> for source code. Both of them are hosted on <a href="https://typekit.com/fonts" target="_blank" rel="external">Typekit</a>.</p><p>If you do not use Typekit, here are the necessary steps to switch to other services:</p><ol><li>In <code>layout/_partial/head.ejs</code>, delete the lines that include the typekit library, then include necessary files from your choice of web fonts (eg: <a href="https://www.google.com/fonts" target="_blank" rel="external">Google Font</a>).</li><li>In <code>source/css/_sass/style.scss</code>, change the font macros to your choices.</li></ol><h2 id="screenshot"><a href="#Screenshot" class="headerlink" title="Screenshot"></a>Screenshot</h2><p><img src="/images/hexo-theme-fact-screenshot.png" alt="Fact Screenshot"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Fact&lt;/strong&gt; is a simple but powerful theme for &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;. It comes wit
    
    </summary>
    
    
      <category term="Theme" scheme="http://artifact.me/tags/theme/"/>
    
      <category term="Hexo" scheme="http://artifact.me/tags/hexo/"/>
    
      <category term="Fact" scheme="http://artifact.me/tags/fact/"/>
    
  </entry>
  
</feed>
